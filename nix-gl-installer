#!/usr/bin/env bash

# Constants
DEFAULT_NIXPKGS_VERSION="nixos-24.11"
SYSTEMD_SERVICE_NAME="nix-activate-gl.service"
SYSTEMD_SERVICE_FILE="/etc/systemd/system/$SYSTEMD_SERVICE_NAME"


THIS_SCRIPT=${BASH_SOURCE[0]}
SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )

interactive=1


die() {
  local msg=$1
  : "${msg:="Unknown error"}"
  echo "ERROR: $msg"
  exit 1
}

get_glx_vendor_string() {
  glxinfo_str=$(glxinfo)
  pattern="client glx vendor string: ([^"$'\n'")]*)"
  if [[ $glxinfo_str =~ $pattern ]]; then
    echo -n "${BASH_REMATCH[1]}"
  fi
}

get_driver_type() {
  local driver_type
  if type nvidia-smi > /dev/null; then
    driver_type=nvidia
  else
    driver_type=mesa
  fi
  echo $driver_type
}

get_nvidia_driver_version() {
  nvidia-smi --query-gpu=driver_version --format=csv,noheader
}

ask_nixpkgs_version() {
  if [[ $interactive -ne 0 ]]; then
    read -rp "Enter the Nixpkgs version (default: $DEFAULT_NIXPKGS_VERSION): " version
    : "${version:=$DEFAULT_NIXPKGS_VERSION}"
  else
    version=$DEFAULT_NIXPKGS_VERSION
  fi
  echo "$version"
}

ask_install_location() {
  local default="/opt/nix-gl-installer"
  if [[ $interactive -ne 0 ]]; then
    read -rp "Enter the install location (default: $default): " path
    : "${path:=$default}"
  else
    path=$default
  fi
  echo "$path"
}

ask_yes_no() {
  local msg=$1
  while true; do
    if [[ $interactive -ne 0 ]]; then
      read -rp "$msg (Y/n): " ans
    else
      echo "$msg (Y/n): y"
      ans=y
    fi
    case $ans in
      "y"|"Y"|"") return 0;;
      "n"|"N") return 1;;
      *) echo "Please enter 'y' or 'n'.";;
    esac
  done
}

build_nvidia_driver() {
  local nixpkgs_url=$1
  local driver_version=$2
  local driver_url="https://us.download.nvidia.com/XFree86/Linux-x86_64/$driver_version/NVIDIA-Linux-x86_64-$driver_version.run"
  local nixfile
  nixfile=$(mktemp)
  cat >"$nixfile" <<EOF
let
  pkgs = import (fetchTarball {
    url = "$nixpkgs_url";
  }) { config = { allowUnfree = true; }; };
in
  (pkgs.linuxPackages.nvidia_x11.override (old: {
    libsOnly = true;
    kernel = null;
  })).overrideAttrs (oldAttrs: {
    nativeBuildInputs = oldAttrs.nativeBuildInputs ++ [ pkgs.breakpointHook ];
    src = builtins.fetchurl "$driver_url";
    useGLVND = true;
  })
EOF
  nix-build --option sandbox false --no-out-link "$nixfile" || die "Failed to build the NVIDIA driver."
}

build_mesa_driver() {
  local nixpkgs_url=$1
  nixfile=$(mktemp)
  cat >"$nixfile" <<EOF
let
  pkgs = import (fetchTarball {
    url = "$nixpkgs_url";
  }) {};
in
  pkgs.mesa.drivers
EOF
  nix-build --no-out-link "$nixfile" || die "Failed to build Mesa driver."
}

has_systemd() {
  systemctl --version > /dev/null
  return $?
}

create_activation_service() {
  local script_path=$1
  local tmp
  tmp=$(mktemp)
  cat >"$tmp" <<EOF
[Unit]
Description=Activate graphics driver installed by nix-gl-installer

[Service]
Type=oneshot
ExecStart=$script_path activate

[Install]
WantedBy=multi-user.target
EOF
  sudo mv "$tmp" $SYSTEMD_SERVICE_FILE || die "Failed to create systemd service file."
  local result=$?
  if [[ $result -ne 0 ]]; then
    die
  fi
  echo "Systemd service file was created at '$SYSTEMD_SERVICE_FILE'."
  sudo systemctl enable "$SYSTEMD_SERVICE_NAME" || die "Failed to enable '$SYSTEMD_SERVICE_NAME'."
}

install() {
  local driver_type

  echo "Detecting graphics driver type..."
  driver_type="$(get_driver_type)" || die "Unknown vendor detected."
  echo "Detected driver type: $driver_type"

  local nixpkgs_url driver_path
  nixpkgs_url="https://github.com/NixOS/nixpkgs/archive/$(ask_nixpkgs_version).tar.gz"

  case $driver_type in
    nvidia)
      local driver_version
      echo -n "Checking driver version..."
      driver_version=$(get_nvidia_driver_version)
      echo "Detected version: $driver_version"

      echo "Building NVIDIA driver (this may take some time)..."
      driver_path=$(build_nvidia_driver "$nixpkgs_url" "$driver_version")
      echo "Done."
    ;;

    mesa)
      echo "Building Mesa driver (this may take some time)..."
      driver_path=$(build_mesa_driver "$nixpkgs_url")
      echo "Done."
    ;;
  esac

  local install_location
  install_location=$(ask_install_location)
  installed_script_location="$install_location/$(basename "$THIS_SCRIPT")"
  
  sudo mkdir -p "$install_location" || die "Failed to create the install directory."
  if [[ ! $THIS_SCRIPT -ef $installed_script_location ]]; then
    sudo cp "$THIS_SCRIPT" "$installed_script_location" || die "Failed to install this script."
  fi
  sudo chmod +x "$installed_script_location"
  sudo ln -snf "$driver_path" "$install_location/opengl-driver" || die "Failed to create symbolic link to the driver."
  sudo "$(which nix-store)" --add-root "$install_location/opengl-driver" -r "$driver_path" > /dev/null || die "Failed to add the driver to gcroot."

  activate "$install_location"

  echo "NOTE: Re-activation is required after rebooting the system."

  if has_systemd && ask_yes_no "Would you like to automate re-activation by creating a systemd service?"; then
    create_activation_service "$installed_script_location"
  fi

  echo "Installation complete."
}

activate() {
  local install_location=$1
  : "${install_location:=$SCRIPT_DIR}"
  echo "Activating..."
  local driver_path
  driver_path=$(readlink "$install_location/opengl-driver") || die "Failed to read the driver path."
  sudo ln -snf "$driver_path" /run/opengl-driver || die "Failed to create symbolic link to the driver."
}

uninstall() {
  local install_location=$SCRIPT_DIR
  
  if [[ -f $SYSTEMD_SERVICE_FILE ]]; then
    echo "Disableing '$SYSTEMD_SERVICE_NAME'"
    sudo systemctl disable "$SYSTEMD_SERVICE_NAME" || die "Failed to disable '$SYSTEMD_SERVICE_NAME'."
    echo "Removing $SYSTEMD_SERVICE_FILE"
    sudo rm $SYSTEMD_SERVICE_FILE || die "Failed to remove '$SYSTEMD_SERVICE_FILE'."
  fi

  if [[ -L $install_location/opengl-driver ]]; then
    if [[ -L /run/opengl-driver ]]; then
      local path_a path_b
      path_a=$(readlink "$install_location/opengl-driver")
      path_b=$(readlink /run/opengl-driver)
      if [[ $path_a == "$path_b" ]]; then
        echo "Removing /run/opengl-driver";
        sudo rm /run/opengl-driver;
      else
        echo "Not removing '/run/opengl-driver' because it's not a symlink to '$install_location/opengl-driver'."
      fi
    fi
    echo "Removing '$install_location/opengl-driver'"
    sudo rm "$install_location/opengl-driver"
    sudo rm -r "$install_location"
  fi
}

main() {
  if [[ -v __NIXOS_SET_ENVIRONMENT_DONE ]]; then
    die "NixOS environment detected. This script should not be run on NixOS."
  fi

  local positional_args=()
  while [[ $# -gt 0 ]]; do
    case $1 in
      -y|--default)
        interactive=0
        shift # past argument
        ;;
      -h|--help)
        echo "Usage: $0 [install|activate|uninstall]"
        echo "Options:"
        echo "  -y, --default  Always answer 'yes' to prompts."
        echo "  -h, --help     Show this help message."
        echo "Subcommands:"
        echo "  install        Install the graphics driver."
        echo "  activate       Activate the installed graphics driver."
        echo "  uninstall      Uninstall the installed graphics driver."
        exit 0
        ;;
      -*)
        echo "Unknown option $1"
        exit 1
        ;;
      *)
        positional_args+=("$1") # save positional arg
        shift # past argument
        ;;
    esac
  done
  set -- "${positional_args[@]}" # restore positional parameters

  local subcommand=$1
  if [[ -z $subcommand ]]; then
    echo "No subcommand specified. defaulting to install."
    subcommand=install
  fi

  case $subcommand in
    install) install;;
    activate) activate;;
    uninstall) uninstall;;
    *) die "Unknown subcommand: $subcommand"
  esac
}

main "$@"
